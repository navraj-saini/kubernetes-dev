Installing kops:

curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops

Installing kubectl

curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl


Installing AWS CLI

aws iam create-group --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops

aws iam create-user --user-name kops
aws iam add-user-to-group --user-name kops --group-name kops
aws iam create-access-key --user-name kops


# configure the aws client to use your new IAM user
aws configure           # Use your new access and secret key here
aws iam list-users      # you should see a list of all your IAM users here

# Because "aws configure" doesn't export these vars for kops to use, we export them now
export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)



Configure DNS

if you already have a DNS then just check it by running the below mentioned command.

dig ns learnkubernetes.xyzc

>> CREATE CLUSTER STORAGE ON S3

aws s3api create-bucket --bucket prefix-example-com-state-store --region ap-south-1
aws s3api put-bucket-versioning --bucket prefix-example-com-state-store  --versioning-configuration Status=Enabled
aws s3api put-bucket-encryption --bucket prefix-example-com-state-store --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'




Creating your first cluster ¶

export NAME=dns_name && export KOPS_STATE_STORE=name of bucket store
aws ec2 describe-availability-zones --region ap-south-1

kops create cluster --zones ap-south-1a ${NAME} --ssh-public-key /home/ec2-user/environment/helloworld.pub

Create a key :

ssh-keygen

TO Create a HA cluster .

Note : Always the master count has to be an odd number.

kops create cluster \
    --node-count 2 \
	--master-count 2 \
    --zones ap-south-1a,ap-south-1b \
    --master-zones ap-south-1a,ap-south-1b \
    --node-size t2.medium \
    --master-size t2.micro \
    --topology private \
    --networking kopeio-vxlan \
    learnkubernetes.xyz


or


kops create cluster learnkubernetes.xyz --node-size t2.micro  --master-count 1  --master-size t2.micro  --topology private  --networking calico  --state s3://lkmumbai-example-com-state-store  --cloud-labels "Cluster=ClusterLabel"  --ssh-public-key /home/ec2-user/.ssh/helloworld.pub  --kubernetes-version "https://storage.googleapis.com/kubernetes-release/release/v1.11.10/" 

kops edit cluster ${NAME}	
	
kops create secret --name myfirstcluster.learnkubernetes.xyz sshpublickey admin -i ~/.ssh/id_rsa.pub
kops create secret sshpublickey  admin -i ~/.ssh/id_rsa.pub  --name devi.k8s.local

Suggestions:
 * validate cluster: kops validate cluster
 * list nodes: kubectl get nodes --show-labels
 * ssh to the master: ssh -i ~/.ssh/id_rsa admin@api.learnkubernetes.xyz
 * the admin user is specific to Debian. If not using Debian please use the appropriate user based on your OS.
 * read about installing addons at: https://github.com/kubernetes/kops/blob/master/docs/addons.md.
